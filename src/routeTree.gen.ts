/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as ProjectRouteRouteImport } from './routes/project/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as ProjectProjectIdmanageRouteRouteImport } from './routes/project/$projectId/(manage)/route'
import { Route as ProjectProjectIdmanageTaskIdIndexRouteImport } from './routes/project/$projectId/(manage)/$taskId/index'
import { Route as ProjectProjectIdmanageTaskIdAssigneeIdRouteImport } from './routes/project/$projectId/(manage)/$taskId/$assigneeId'

const ProjectRouteRoute = ProjectRouteRouteImport.update({
  id: '/project',
  path: '/project',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const ProjectProjectIdmanageRouteRoute =
  ProjectProjectIdmanageRouteRouteImport.update({
    id: '/$projectId/(manage)',
    getParentRoute: () => ProjectRouteRoute,
  } as any)
const ProjectProjectIdmanageTaskIdIndexRoute =
  ProjectProjectIdmanageTaskIdIndexRouteImport.update({
    id: '/$taskId/',
    path: '/$taskId/',
    getParentRoute: () => ProjectProjectIdmanageRouteRoute,
  } as any)
const ProjectProjectIdmanageTaskIdAssigneeIdRoute =
  ProjectProjectIdmanageTaskIdAssigneeIdRouteImport.update({
    id: '/$taskId/$assigneeId',
    path: '/$taskId/$assigneeId',
    getParentRoute: () => ProjectProjectIdmanageRouteRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/project': typeof ProjectRouteRouteWithChildren
  '/project/$projectId': typeof ProjectProjectIdmanageRouteRouteWithChildren
  '/project/$projectId/$taskId/$assigneeId': typeof ProjectProjectIdmanageTaskIdAssigneeIdRoute
  '/project/$projectId/$taskId': typeof ProjectProjectIdmanageTaskIdIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/project': typeof ProjectRouteRouteWithChildren
  '/project/$projectId': typeof ProjectProjectIdmanageRouteRouteWithChildren
  '/project/$projectId/$taskId/$assigneeId': typeof ProjectProjectIdmanageTaskIdAssigneeIdRoute
  '/project/$projectId/$taskId': typeof ProjectProjectIdmanageTaskIdIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/project': typeof ProjectRouteRouteWithChildren
  '/project/$projectId/(manage)': typeof ProjectProjectIdmanageRouteRouteWithChildren
  '/project/$projectId/(manage)/$taskId/$assigneeId': typeof ProjectProjectIdmanageTaskIdAssigneeIdRoute
  '/project/$projectId/(manage)/$taskId/': typeof ProjectProjectIdmanageTaskIdIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/project'
    | '/project/$projectId'
    | '/project/$projectId/$taskId/$assigneeId'
    | '/project/$projectId/$taskId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/project'
    | '/project/$projectId'
    | '/project/$projectId/$taskId/$assigneeId'
    | '/project/$projectId/$taskId'
  id:
    | '__root__'
    | '/'
    | '/project'
    | '/project/$projectId/(manage)'
    | '/project/$projectId/(manage)/$taskId/$assigneeId'
    | '/project/$projectId/(manage)/$taskId/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ProjectRouteRoute: typeof ProjectRouteRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/project': {
      id: '/project'
      path: '/project'
      fullPath: '/project'
      preLoaderRoute: typeof ProjectRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/project/$projectId/(manage)': {
      id: '/project/$projectId/(manage)'
      path: '/$projectId'
      fullPath: '/project/$projectId'
      preLoaderRoute: typeof ProjectProjectIdmanageRouteRouteImport
      parentRoute: typeof ProjectRouteRoute
    }
    '/project/$projectId/(manage)/$taskId/': {
      id: '/project/$projectId/(manage)/$taskId/'
      path: '/$taskId'
      fullPath: '/project/$projectId/$taskId'
      preLoaderRoute: typeof ProjectProjectIdmanageTaskIdIndexRouteImport
      parentRoute: typeof ProjectProjectIdmanageRouteRoute
    }
    '/project/$projectId/(manage)/$taskId/$assigneeId': {
      id: '/project/$projectId/(manage)/$taskId/$assigneeId'
      path: '/$taskId/$assigneeId'
      fullPath: '/project/$projectId/$taskId/$assigneeId'
      preLoaderRoute: typeof ProjectProjectIdmanageTaskIdAssigneeIdRouteImport
      parentRoute: typeof ProjectProjectIdmanageRouteRoute
    }
  }
}

interface ProjectProjectIdmanageRouteRouteChildren {
  ProjectProjectIdmanageTaskIdAssigneeIdRoute: typeof ProjectProjectIdmanageTaskIdAssigneeIdRoute
  ProjectProjectIdmanageTaskIdIndexRoute: typeof ProjectProjectIdmanageTaskIdIndexRoute
}

const ProjectProjectIdmanageRouteRouteChildren: ProjectProjectIdmanageRouteRouteChildren =
  {
    ProjectProjectIdmanageTaskIdAssigneeIdRoute:
      ProjectProjectIdmanageTaskIdAssigneeIdRoute,
    ProjectProjectIdmanageTaskIdIndexRoute:
      ProjectProjectIdmanageTaskIdIndexRoute,
  }

const ProjectProjectIdmanageRouteRouteWithChildren =
  ProjectProjectIdmanageRouteRoute._addFileChildren(
    ProjectProjectIdmanageRouteRouteChildren,
  )

interface ProjectRouteRouteChildren {
  ProjectProjectIdmanageRouteRoute: typeof ProjectProjectIdmanageRouteRouteWithChildren
}

const ProjectRouteRouteChildren: ProjectRouteRouteChildren = {
  ProjectProjectIdmanageRouteRoute:
    ProjectProjectIdmanageRouteRouteWithChildren,
}

const ProjectRouteRouteWithChildren = ProjectRouteRoute._addFileChildren(
  ProjectRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ProjectRouteRoute: ProjectRouteRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
